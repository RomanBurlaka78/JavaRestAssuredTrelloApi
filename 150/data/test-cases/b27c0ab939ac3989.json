{"uid":"b27c0ab939ac3989","name":"testCreateAListOnABoard","fullName":"api.tests.api.BoardApiTest.testCreateAListOnABoard","historyId":"1c01af165768f5a2c9bad026c0be8bfe","time":{"start":1744747581197,"stop":1744747581432,"duration":235},"description":"Create a List on a Board","descriptionHtml":"<p>Create a List on a Board</p>\n","status":"broken","statusMessage":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","statusTrace":"java.lang.IllegalStateException: Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\n\tat io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.path(RestAssuredResponseOptionsGroovyImpl.groovy:414)\n\tat io.restassured.internal.RestAssuredResponseOptionsImpl.path(RestAssuredResponseOptionsImpl.java:230)\n\tat api.tests.api.BoardApiTest.testCreateAListOnABoard(BoardApiTest.java:59)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:739)\n\tat org.testng.TestRunner.run(TestRunner.java:614)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:421)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:312)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1208)\n\tat org.testng.TestNG.runSuites(TestNG.java:1112)\n\tat org.testng.TestNG.run(TestNG.java:1079)\n\tat org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)\n\tat org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)\n\tat org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Create a List on a Board","status":"broken","statusMessage":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","statusTrace":"java.lang.IllegalStateException: Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\n\tat io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.path(RestAssuredResponseOptionsGroovyImpl.groovy:414)\n\tat io.restassured.internal.RestAssuredResponseOptionsImpl.path(RestAssuredResponseOptionsImpl.java:230)\n\tat api.tests.api.BoardApiTest.testCreateAListOnABoard(BoardApiTest.java:59)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:739)\n\tat org.testng.TestRunner.run(TestRunner.java:614)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:421)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:312)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1208)\n\tat org.testng.TestNG.runSuites(TestNG.java:1112)\n\tat org.testng.TestNG.run(TestNG.java:1079)\n\tat org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)\n\tat org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)\n\tat org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n","steps":[{"name":"Create a List on a Board: id board = null, list name = List test API","time":{"start":1744747581197,"stop":1744747581421,"duration":224},"status":"passed","steps":[],"attachments":[{"uid":"5d5f98bcfaa607a7","name":"Request","source":"5d5f98bcfaa607a7.html","type":"text/html","size":647},{"uid":"871f66cc95a9600d","name":"HTTP/1.1 400 Bad Request","source":"871f66cc95a9600d.html","type":"text/html","size":3176}],"parameters":[{"name":"boardId","value":"null"},{"name":"nameForList","value":"List test API"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"package","value":"api.tests.api.BoardApiTest"},{"name":"testClass","value":"api.tests.api.BoardApiTest"},{"name":"testMethod","value":"testCreateAListOnABoard"},{"name":"parentSuite","value":"All test"},{"name":"suite","value":"Tests API with xml"},{"name":"subSuite","value":"api.tests.api.BoardApiTest"},{"name":"host","value":"9f39e401739d"},{"name":"thread","value":"81@9f39e401739d.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"},{"name":"story","value":"Bord"},{"name":"epic","value":"API Tests"},{"name":"tag","value":"api"},{"name":"owner","value":"Group JavaForwardToOffer"},{"name":"feature","value":"Board Validation"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"Group JavaForwardToOffer","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":16,"skipped":0,"passed":2,"unknown":0,"total":18},"items":[{"uid":"6d935077a10361cd","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/149//#testresult/6d935077a10361cd","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744747501301,"stop":1744747501535,"duration":234}},{"uid":"45d9091257586d07","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/148//#testresult/45d9091257586d07","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744743925781,"stop":1744743925960,"duration":179}},{"uid":"7dd557ed2c3b5905","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/147//#testresult/7dd557ed2c3b5905","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744743491485,"stop":1744743491641,"duration":156}},{"uid":"971fbcd12485a6d8","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/146//#testresult/971fbcd12485a6d8","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744740566597,"stop":1744740566806,"duration":209}},{"uid":"eced07a5bacfe250","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/145//#testresult/eced07a5bacfe250","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737450770,"stop":1744737450908,"duration":138}},{"uid":"67b354b5a091adc5","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/144//#testresult/67b354b5a091adc5","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737400933,"stop":1744737401126,"duration":193}},{"uid":"cd3759be4e025cf7","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/143//#testresult/cd3759be4e025cf7","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737003364,"stop":1744737003601,"duration":237}},{"uid":"af7ef3543b2ec9dc","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/143//#testresult/af7ef3543b2ec9dc","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744736450976,"stop":1744736451225,"duration":249}},{"uid":"f4bbfddde2408b90","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/142//#testresult/f4bbfddde2408b90","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744718731342,"stop":1744718731583,"duration":241}},{"uid":"c265306c00f8e1fc","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/141//#testresult/c265306c00f8e1fc","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744718640260,"stop":1744718640443,"duration":183}},{"uid":"9df5b8a15ab19333","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/140//#testresult/9df5b8a15ab19333","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744715928571,"stop":1744715928731,"duration":160}},{"uid":"6a0150e50bcc08d","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/139//#testresult/6a0150e50bcc08d","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744715899481,"stop":1744715899626,"duration":145}},{"uid":"552d4144fe15afb3","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/138//#testresult/552d4144fe15afb3","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744714416682,"stop":1744714416845,"duration":163}},{"uid":"23cf5fe379f8056a","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/137//#testresult/23cf5fe379f8056a","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744714307986,"stop":1744714308123,"duration":137}},{"uid":"3a7c68124c415cd1","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/136//#testresult/3a7c68124c415cd1","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744713840569,"stop":1744713840707,"duration":138}},{"uid":"e2a14e1eb1995be2","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/135//#testresult/e2a14e1eb1995be2","status":"passed","time":{"start":1744638659930,"stop":1744638660189,"duration":259}},{"uid":"e3e3722e2aaef6dd","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/134//#testresult/e3e3722e2aaef6dd","status":"passed","time":{"start":1744638488434,"stop":1744638488640,"duration":206}}]},"tags":["api"]},"source":"b27c0ab939ac3989.json","parameterValues":[]}