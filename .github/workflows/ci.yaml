name: Java CI with Maven

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: 'Run tests'
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Git clone
        uses: actions/checkout@v4

      # Шаг 2: Установка JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'

      # Шаг 3: Установка Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Шаг 4: Создание config.properties
      - name: Create config.properties
        run: |
          echo "key=${{ secrets.key }}" > src/test/resources/config.properties
          echo "token=${{ secrets.token }}" >> src/test/resources/config.properties

      # Шаг 5: Сборка Docker Compose
      - name: Build with Docker Compose
        run: docker-compose build

      # Шаг 6: Запуск Docker Compose (Elasticsearch и Kibana)
      - name: Start Docker Compose services
        run: docker-compose up -d

      # Шаг 7: Установка ngrok
      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

      # Шаг 8: Установка authtoken для ngrok
      - name: Set ngrok authtoken
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTHTOKEN }}

      # Шаг 9: Запуск ngrok для Elasticsearch
      - name: Start ngrok for Elasticsearch
        run: |
          ngrok http 9200 > /dev/null &
          sleep 5  # Дать ngrok время для запуска
          curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > elasticsearch_url.txt
          echo "Elasticsearch URL: $(cat elasticsearch_url.txt)"

      # Шаг 10: Запуск ngrok для Kibana
      - name: Start ngrok for Kibana
        run: |
          ngrok http 5601 > /dev/null &
          sleep 5  # Дать ngrok время для запуска
          curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > kibana_url.txt
          echo "Kibana URL: $(cat kibana_url.txt)"

      # Шаг 11: Сохранение ngrok URLs как артефактов
      - name: Upload ngrok URLs
        uses: actions/upload-artifact@v4
        with:
          name: ngrok-urls
          path: |
            elasticsearch_url.txt
            kibana_url.txt

      # Шаг 12: Сохранение скриншотов (если тесты упали)
      - name: Attach screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ${{ github.workspace }}/screenshots

      # Шаг 13: Получение истории Allure (для отчетов)
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Шаг 14: Генерация Allure-отчета
      - name: Build Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: target/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Шаг 15: Проверка результатов Allure
      - name: Check Allure results
        run: ls -la target/allure-results

      # Шаг 16: Публикация Allure-отчета на GitHub Pages
      - name: Publish Allure report to Github Pages
        if: ${{ success() || failure() }}
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history


      # Шаг 17: Остановка Docker Compose
      - name: Stop Docker Compose services
        if: always()
        run: docker-compose down