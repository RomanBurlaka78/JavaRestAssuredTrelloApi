name: Java CI with Maven

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: 'Run tests'
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Git clone
        uses: actions/checkout@v4

      # Шаг 2: Установка JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'

      # Шаг 3: Установка Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Шаг 4: Создание config.properties
      - name: Create config.properties
        run: |
          echo "key=${{ secrets.key }}" > src/test/resources/config.properties
          echo "token=${{ secrets.token }}" >> src/test/resources/config.properties

      # Шаг 5: Сборка Docker Compose
      - name: Build with Docker Compose
        run: docker-compose build

      # Шаг 6: Запуск Docker Compose (Elasticsearch и Kibana)
      - name: Start Docker Compose services
        run: docker-compose up -d

      # Шаг 7: Ожидание готовности Elasticsearch
      - name: Wait for Elasticsearch to be ready
        run: |
          until curl -s http://localhost:9200; do
            echo "Waiting for Elasticsearch..."
            sleep 5
          done

      # Шаг 8: Ожидание готовности Kibana
      - name: Wait for Kibana to be ready
        run: |
          until curl -s http://localhost:5601/api/status; do
            echo "Waiting for Kibana..."
            sleep 5
          done

      # Шаг 9: Запуск тестов
      - name: Run tests with Maven
        run: mvn clean test

      # Шаг 10: Сохранение скриншотов (если тесты упали)
      - name: Attach screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ${{ github.workspace }}/screenshots

      # Шаг 11: Получение истории Allure (для отчетов)
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Шаг 12: Генерация Allure-отчета
      - name: Build Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: target/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Шаг 13: Проверка результатов Allure
      - name: Check Allure results
        run: ls -la target/allure-results

      # Шаг 14: Публикация Allure-отчета на GitHub Pages
      - name: Publish Allure report to Github Pages
        if: ${{ success() || failure() }}
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      # Шаг 15: Проверка логов Elasticsearch
      - name: Check Elasticsearch logs
        run: |
          echo "Elasticsearch is running at http://localhost:9200"
          curl -X GET "http://localhost:9200/_search?pretty"

      # Шаг 16: Проверка логов Kibana
      - name: Check Kibana logs
        run: |
          echo "Kibana is running at http://localhost:5601"
          curl -X GET "http://localhost:5601/api/status"

      # Шаг 17: Остановка Docker Compose
      - name: Stop Docker Compose services
        if: always()
        run: docker-compose down