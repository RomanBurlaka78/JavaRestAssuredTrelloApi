{"uid":"226ea79dc70d893f","name":"testCreateALabelOnABoard","fullName":"api.tests.api.BoardApiTest.testCreateALabelOnABoard","historyId":"67fea96a971147751ef5d10b2edefd2d","time":{"start":1744921304701,"stop":1744921304926,"duration":225},"description":"Create a Label on a Board","descriptionHtml":"<p>Create a Label on a Board</p>\n","status":"broken","statusMessage":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","statusTrace":"java.lang.IllegalStateException: Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\n\tat io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.path(RestAssuredResponseOptionsGroovyImpl.groovy:414)\n\tat io.restassured.internal.RestAssuredResponseOptionsImpl.path(RestAssuredResponseOptionsImpl.java:230)\n\tat api.tests.api.BoardApiTest.testCreateALabelOnABoard(BoardApiTest.java:72)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:739)\n\tat org.testng.TestRunner.run(TestRunner.java:614)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:421)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:312)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1208)\n\tat org.testng.TestNG.runSuites(TestNG.java:1112)\n\tat org.testng.TestNG.run(TestNG.java:1079)\n\tat org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)\n\tat org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)\n\tat org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Create a Label on a Board","status":"broken","statusMessage":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","statusTrace":"java.lang.IllegalStateException: Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\n\tat io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.path(RestAssuredResponseOptionsGroovyImpl.groovy:414)\n\tat io.restassured.internal.RestAssuredResponseOptionsImpl.path(RestAssuredResponseOptionsImpl.java:230)\n\tat api.tests.api.BoardApiTest.testCreateALabelOnABoard(BoardApiTest.java:72)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:739)\n\tat org.testng.TestRunner.run(TestRunner.java:614)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:421)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:312)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1208)\n\tat org.testng.TestNG.runSuites(TestNG.java:1112)\n\tat org.testng.TestNG.run(TestNG.java:1079)\n\tat org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)\n\tat org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)\n\tat org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n","steps":[{"name":"Create a Label on a Board: id board = null, label name = Api_Label, label color = red","time":{"start":1744921304702,"stop":1744921304925,"duration":223},"status":"passed","steps":[],"attachments":[{"uid":"4e0d08616901dbdc","name":"Request","source":"4e0d08616901dbdc.html","type":"text/html","size":661},{"uid":"22f6c8a24e6c6a4b","name":"HTTP/1.1 400 Bad Request","source":"22f6c8a24e6c6a4b.html","type":"text/html","size":3178}],"parameters":[{"name":"boardId","value":"null"},{"name":"nameOfLabel","value":"Api_Label"},{"name":"color","value":"red"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"package","value":"api.tests.api.BoardApiTest"},{"name":"testClass","value":"api.tests.api.BoardApiTest"},{"name":"testMethod","value":"testCreateALabelOnABoard"},{"name":"parentSuite","value":"All test"},{"name":"suite","value":"Tests API with xml"},{"name":"subSuite","value":"api.tests.api.BoardApiTest"},{"name":"host","value":"490046d262cc"},{"name":"thread","value":"82@490046d262cc.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"},{"name":"story","value":"Bord"},{"name":"epic","value":"API Tests"},{"name":"tag","value":"api"},{"name":"owner","value":"Group JavaForwardToOffer"},{"name":"feature","value":"Board Validation"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"Group JavaForwardToOffer","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":2,"unknown":0,"total":19},"items":[{"uid":"bc0b87e32cd609e4","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/150//#testresult/bc0b87e32cd609e4","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744747581447,"stop":1744747581684,"duration":237}},{"uid":"f40f032684b20676","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/149//#testresult/f40f032684b20676","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744747501563,"stop":1744747501897,"duration":334}},{"uid":"86c99f7f751db3d3","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/148//#testresult/86c99f7f751db3d3","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744743925982,"stop":1744743926161,"duration":179}},{"uid":"74e56d36b29b74b3","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/147//#testresult/74e56d36b29b74b3","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744743491648,"stop":1744743491800,"duration":152}},{"uid":"98fbd5724626506c","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/146//#testresult/98fbd5724626506c","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744740566820,"stop":1744740567004,"duration":184}},{"uid":"b6e212d8754b8686","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/145//#testresult/b6e212d8754b8686","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737450918,"stop":1744737451061,"duration":143}},{"uid":"95faa50d04d1e8f","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/144//#testresult/95faa50d04d1e8f","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737401141,"stop":1744737401277,"duration":136}},{"uid":"523db501a5caf1e7","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/143//#testresult/523db501a5caf1e7","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744737003713,"stop":1744737003942,"duration":229}},{"uid":"87fc7d289cfe61f9","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/143//#testresult/87fc7d289cfe61f9","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744736451345,"stop":1744736451550,"duration":205}},{"uid":"5ce4cdd07ba89046","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/142//#testresult/5ce4cdd07ba89046","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744718731704,"stop":1744718731949,"duration":245}},{"uid":"450bf68663495c61","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/141//#testresult/450bf68663495c61","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744718640525,"stop":1744718640705,"duration":180}},{"uid":"a0bf2e359e887827","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/140//#testresult/a0bf2e359e887827","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744715928824,"stop":1744715928978,"duration":154}},{"uid":"5c39d4a4582b7172","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/139//#testresult/5c39d4a4582b7172","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744715899751,"stop":1744715899888,"duration":137}},{"uid":"18fc16fb541b42f4","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/138//#testresult/18fc16fb541b42f4","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744714416932,"stop":1744714417065,"duration":133}},{"uid":"76e980be987528de","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/137//#testresult/76e980be987528de","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744714308218,"stop":1744714308378,"duration":160}},{"uid":"bb4bb1f92cf00064","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/136//#testresult/bb4bb1f92cf00064","status":"broken","statusDetails":"Cannot determine which path implementation to use because the content-type text/plain; charset=utf-8 doesn't map to a path implementation.","time":{"start":1744713840760,"stop":1744713840926,"duration":166}},{"uid":"51666a6a1d773571","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/135//#testresult/51666a6a1d773571","status":"passed","time":{"start":1744638664335,"stop":1744638664649,"duration":314}},{"uid":"f38828be2cfe194b","reportUrl":"https://RomanBurlaka78.github.io/JavaRestAssuredTrelloApi/134//#testresult/f38828be2cfe194b","status":"passed","time":{"start":1744638490978,"stop":1744638491259,"duration":281}}]},"tags":["api"]},"source":"226ea79dc70d893f.json","parameterValues":[]}